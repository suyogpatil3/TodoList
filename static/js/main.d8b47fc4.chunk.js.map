{"version":3,"sources":["TodoForm.js","Todo.js","List.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","setTextInput","textInput","setStatus","setEditItem","todoArray","setTodoArray","editItem","setLocalStorage","className","value","type","onChange","event","target","placeholder","onClick","e","preventDefault","map","item","id","text","newTodoArray","completed","Math","floor","random","name","Todo","todo","completedTodo","el","afterDeletionArray","filter","element","List","filterTodo","reverse","App","useState","saveditems","JSON","parse","localStorage","getItem","status","setFilterTodo","array","setItem","stringify","useEffect","document","getElementById","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d8b47fc4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TodoForm = ({setTextInput,textInput,setStatus,setEditItem, todoArray,setTodoArray,editItem,setLocalStorage}) => {\r\n\r\n const getInput = (event) => {\r\n    setTextInput(event.target.value);\r\n }\r\n const changeStatus = (e) => {\r\n     setStatus(e.target.value);\r\n }\r\n\r\n const submitTodo = (e) =>{\r\n     setStatus(\"All\");\r\n    e.preventDefault();\r\n    if(textInput!==\"\"){\r\n        if(editItem){\r\n            todoArray.map((item) => {\r\n                if(item.id===editItem) {\r\n                    (item.text = textInput)\r\n                    setTodoArray(todoArray);\r\n                    setLocalStorage(todoArray);\r\n                    // return true\r\n                }\r\n            })\r\n            setEditItem(\"\");\r\n            setTextInput(\"\");\r\n        }\r\n        else{\r\n           let newTodoArray = [...todoArray,{text : textInput , completed : false ,id: Math.floor(Math.random()*800000) }];\r\n           setTodoArray(newTodoArray);\r\n           setLocalStorage(newTodoArray);\r\n            setTextInput(\"\");\r\n        }\r\n      \r\n    }\r\n    else return;\r\n   \r\n }\r\n    return(\r\n        <form>\r\n            <div className=\"formInput\">\r\n            <input value={textInput} type = \"text\" className = \"input\" onChange = {getInput} placeholder=\"Add a todo!\"/>\r\n            <button className = \"add\" type = \"submit\" onClick={submitTodo}>\r\n                <i className={(editItem) ? \"fas fa-edit \" : \"fas fa-plus-circle \"}></i>\r\n            </button>\r\n            </div>\r\n            <div id=\"selectTodo\">\r\n                <select name = \"todoOptions\" id=\"select\" onChange={changeStatus}>\r\n                    <option id=\"all\" value = \"All\">All</option>\r\n                    <option value = \"Completed\" >Completed</option>\r\n                    <option value = \"Incomplete\" >Incomplete</option>\r\n                </select>\r\n            </div>\r\n            \r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;","import React from 'react'\r\nimport './App.css'\r\nexport default function Todo({text,todoArray,setTodoArray,todo,setEditItem,setTextInput,setLocalStorage}) {\r\n    // const [deleteTodo,setDeleteTodo] = useState(\"\");\r\n    const deleteTodo = () => {\r\n        let afterDeletionArray = todoArray.filter((element) => element.id !== todo.id);\r\n        setTodoArray(afterDeletionArray);\r\n        setLocalStorage(afterDeletionArray);\r\n    }\r\n\r\n    const editTodo = () =>{\r\n        setEditItem(todo.id);\r\n        setTextInput(todo.text);\r\n        \r\n    }\r\n\r\n    const complete = () => {\r\n        let completedTodo = todoArray.map((el) => {\r\n           if (el.id === todo.id)  {\r\n               return{\r\n                ...el,completed : !el.completed,\r\n               }\r\n           } \r\n           return el \r\n        })\r\n        setTodoArray(completedTodo);\r\n        setLocalStorage(completedTodo);\r\n    }\r\n    return (\r\n        <div>\r\n        <div className={(todo.completed) ? \"todo_checked\" : \"todo\"} >\r\n            <div className=\"todoText\">\r\n                <li className=\"text\">{text}</li>\r\n            </div> \r\n            <div className=\"buttons\">\r\n                <button onClick={complete} id=\"check\" ><i className=\"fas fa-check\"></i></button>\r\n                <button onClick={editTodo} id = \"edit\" ><i className=\"fas fa-edit \"></i></button>\r\n                <button onClick = {deleteTodo} id = \"trash\"><i className=\"fas fa-trash\"></i></button>\r\n            </div>\r\n        </div>\r\n        <br></br>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\nfunction List({todoArray,setTodoArray,filterTodo,setEditItem,setTextInput,setLocalStorage}) {\r\n    return (\r\n        <div className = \"todoContainer\">\r\n            <ul className= \"todoList\">\r\n                {\r\n                    filterTodo.map((todo) => {\r\n                    // todoArray.map((todo) => {\r\n                        return <Todo\r\n                            todoArray={todoArray}\r\n                            setTodoArray={setTodoArray} \r\n                            key={todo.id}\r\n                            todo = {todo} \r\n                            text = {todo.text}\r\n                            setEditItem = {setEditItem}\r\n                            setTextInput = {setTextInput}\r\n                            setLocalStorage={setLocalStorage}\r\n                        />\r\n                    }).reverse()\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List;\r\n","import React,{useState , useEffect} from 'react';\nimport './App.css';\nimport TodoForm from './TodoForm';\nimport List from './List';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [textInput,setTextInput] = useState(\"\");\n  const saveditems = JSON.parse(localStorage.getItem('todoArray'));\n  const[todoArray,setTodoArray] = useState(saveditems || []);\n  const [status,setStatus] = useState(\"All\");\n  const[filterTodo,setFilterTodo] = useState([]);\n  const[editItem,setEditItem] = useState(\"\");\n\n\n  function filterTodoList(){\n    if(status === 'Completed'){\n      setFilterTodo(todoArray.filter((item) => item.completed));\n    }\n    else if(status === \"Incomplete\"){\n      setFilterTodo(todoArray.filter((item) => !item.completed));\n    }\n    else {\n      document.getElementById(\"select\").value= \"All\";\n      setFilterTodo(todoArray);\n    }\n  }\n\n  function setLocalStorage(array){\n    localStorage.setItem(\"todoArray\", JSON.stringify(array));\n}\n \n  useEffect(()=>{\n    filterTodoList();\n  },[todoArray,status])\n\n  return (\n    <div className=\"App \">\n      <p id=\"h1\">Todo List</p>\n      <div class=\"form\">\n      <TodoForm \n        todoArray={todoArray} \n        setTodoArray={setTodoArray} \n        textInput={textInput} \n        setTextInput = {setTextInput}\n        setStatus = {setStatus}\n        status={status}\n        editItem = {editItem}\n        setEditItem = {setEditItem}\n        setLocalStorage = {setLocalStorage}\n      />\n      <List\n        todoArray={todoArray}\n        filterTodo = {filterTodo}\n        setTodoArray = {setTodoArray} \n        setEditItem = {setEditItem}\n        setTextInput={setTextInput}\n        setLocalStorage ={setLocalStorage}\n      />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}